from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.image import Image
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.properties import NumericProperty, ListProperty
from kivy.core.audio import SoundLoader
import random

# „Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫Ë®≠ÂÆö
Window.size = (800, 400)


class Fugu(Image):
    """„Éó„É¨„Ç§„É§„ÉºÔºà„Åµ„ÅêÂà∫Ë∫´Ôºâ"""
    velocity_y = NumericProperty(0)  # ‰øÆÊ≠£Ê∏à„Åø
    gravity = -0.5
    jump_power = 15
    on_ground = True

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.source = "assets/fugu.png"
        self.size_hint = (None, None)
        self.size = (100, 100)
        self.pos = (100, 100)

    def update(self):
        # „Ç∏„É£„É≥„Éó„Å®ÈáçÂäõ
        self.y += self.velocity_y
        self.velocity_y += self.gravity

        if self.y <= 100:  # Âú∞Èù¢„Å´ÁùÄ„ÅÑ„Åü„Çâ
            self.y = 100
            self.velocity_y = 0
            self.on_ground = True

    def jump(self):
        if self.on_ground:
            self.velocity_y = self.jump_power
            self.on_ground = False


class Obstacle(Image):
    """ÈöúÂÆ≥Áâ©„ÇØ„É©„Çπ"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.source = "assets/fugu.png"  # „Åµ„ÅêÂà∫Ë∫´„ÇíÈöúÂÆ≥Áâ©„Å´‰ΩøÁî®
        self.size_hint = (None, None)
        self.size = (80, 80)
        self.pos = (Window.width, 100)

    def update(self, dt):
        self.x -= 5
        if self.x < -100 and self.parent:
            self.parent.remove_widget(self)


class Game(Widget):
    obstacles = ListProperty([])

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.fugu = Fugu()
        self.add_widget(self.fugu)
        Clock.schedule_interval(self.update, 1 / 120)
        Clock.schedule_interval(self.spawn_obstacle, 2.0)

    def update(self, dt):
        self.fugu.update()

        for obs in list(self.obstacles):
            obs.update(dt)

            # Ë°ùÁ™ÅÂà§ÂÆö
            if self.check_collision(self.fugu, obs):
                print("„Ç≤„Éº„É†„Ç™„Éº„Éê„Éºüê°üí•")

                # „Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÊôÇ„ÅÆÈü≥„ÇíÈ≥¥„Çâ„Åô
                sound = SoundLoader.load(
                    r"D:\workspace\Pufferfish-Sashimi_Runner\Pufferfish-Sashimi_Runner-main\Pufferfish-Sashimi_Runner-main\assets\khau-tru-2.mp3"
                )
                if sound:
                    sound.play()

                # Êõ¥Êñ∞ÂÅúÊ≠¢
                Clock.unschedule(self.update)
                Clock.unschedule(self.spawn_obstacle)

    def spawn_obstacle(self, dt):
        obs = Obstacle()
        self.obstacles.append(obs)
        self.add_widget(obs)

    def check_collision(self, fugu, obs):
        return (
            fugu.x < obs.x + obs.width and
            fugu.x + fugu.width > obs.x and
            fugu.y < obs.y + obs.height and
            fugu.y + fugu.height > obs.y
        )

    def on_touch_down(self, touch):
        self.fugu.jump()


class FuguRunnerApp(App):
    def build(self):
        return Game()


if __name__ == "__main__":
    FuguRunnerApp().run()
